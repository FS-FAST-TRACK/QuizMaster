// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizMaster.Account.Api.DbContexts;

#nullable disable

namespace QuizMaster.Account.API.Migrations
{
    [DbContext(typeof(QuizMasterDbContext))]
    partial class QuizMasterDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizMaster.Common.Library.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ActiveData")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("QAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QAudio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("QDifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("QImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QStatement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QCategoryId");

                    b.HasIndex("QDifficultyId");

                    b.HasIndex("QTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizMaster.Common.Library.Entities.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ActiveData")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("QCategoryDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActiveData = true,
                            DateCreated = new DateTime(2023, 10, 14, 5, 2, 42, 63, DateTimeKind.Local).AddTicks(1343),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QCategoryDesc = "Science",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            ActiveData = true,
                            DateCreated = new DateTime(2023, 10, 14, 5, 2, 42, 63, DateTimeKind.Local).AddTicks(1345),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QCategoryDesc = "Movies",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            ActiveData = true,
                            DateCreated = new DateTime(2023, 10, 14, 5, 2, 42, 63, DateTimeKind.Local).AddTicks(1346),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QCategoryDesc = "Animals",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            ActiveData = true,
                            DateCreated = new DateTime(2023, 10, 14, 5, 2, 42, 63, DateTimeKind.Local).AddTicks(1347),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QCategoryDesc = "Places",
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            ActiveData = true,
                            DateCreated = new DateTime(2023, 10, 14, 5, 2, 42, 63, DateTimeKind.Local).AddTicks(1348),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QCategoryDesc = "People",
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            ActiveData = true,
                            DateCreated = new DateTime(2023, 10, 14, 5, 2, 42, 63, DateTimeKind.Local).AddTicks(1349),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QCategoryDesc = "System Operations and Maintenance",
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            ActiveData = true,
                            DateCreated = new DateTime(2023, 10, 14, 5, 2, 42, 63, DateTimeKind.Local).AddTicks(1350),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QCategoryDesc = "Data Structures",
                            UserId = 2
                        },
                        new
                        {
                            Id = 8,
                            ActiveData = true,
                            DateCreated = new DateTime(2023, 10, 14, 5, 2, 42, 63, DateTimeKind.Local).AddTicks(1351),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QCategoryDesc = "Algorithms",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("QuizMaster.Common.Library.Entities.QuestionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ActiveData")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("QDetailDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDetails");
                });

            modelBuilder.Entity("QuizMaster.Common.Library.Entities.QuestionDifficulty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ActiveData")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("QDifficultyDesc")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionDifficulties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActiveData = true,
                            DateCreated = new DateTime(2023, 10, 14, 5, 2, 42, 63, DateTimeKind.Local).AddTicks(1324),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QDifficultyDesc = "Easy",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            ActiveData = true,
                            DateCreated = new DateTime(2023, 10, 14, 5, 2, 42, 63, DateTimeKind.Local).AddTicks(1326),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QDifficultyDesc = "Average",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            ActiveData = true,
                            DateCreated = new DateTime(2023, 10, 14, 5, 2, 42, 63, DateTimeKind.Local).AddTicks(1328),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QDifficultyDesc = "Difficult",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("QuizMaster.Common.Library.Entities.QuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ActiveData")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("QDetailRequired")
                        .HasColumnType("bit");

                    b.Property<string>("QTypeDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActiveData = true,
                            DateCreated = new DateTime(2023, 10, 14, 5, 2, 42, 63, DateTimeKind.Local).AddTicks(1368),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QDetailRequired = false,
                            QTypeDesc = "Multiple Choice",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            ActiveData = true,
                            DateCreated = new DateTime(2023, 10, 14, 5, 2, 42, 63, DateTimeKind.Local).AddTicks(1369),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QDetailRequired = false,
                            QTypeDesc = "Multiple Choice + Audio",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            ActiveData = true,
                            DateCreated = new DateTime(2023, 10, 14, 5, 2, 42, 63, DateTimeKind.Local).AddTicks(1371),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QDetailRequired = false,
                            QTypeDesc = "True or False",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            ActiveData = true,
                            DateCreated = new DateTime(2023, 10, 14, 5, 2, 42, 63, DateTimeKind.Local).AddTicks(1372),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QDetailRequired = false,
                            QTypeDesc = "Type Answer",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("QuizMaster.Common.Library.Entities.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ActiveData")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserAccounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActiveData = true,
                            DateCreated = new DateTime(2023, 10, 14, 5, 2, 42, 63, DateTimeKind.Local).AddTicks(1057),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "admin@fullscale.io",
                            FirstName = "admin",
                            LastName = "admin",
                            Password = "b03ddf3ca2e714a6548e7495e2a03f5e824eaac9837cd7f159c67b90fb4b7342",
                            UserName = "admin",
                            UserRoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            ActiveData = true,
                            DateCreated = new DateTime(2023, 10, 14, 5, 2, 42, 63, DateTimeKind.Local).AddTicks(1107),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "user@fullscale.io",
                            FirstName = "user",
                            LastName = "user",
                            Password = "b03ddf3ca2e714a6548e7495e2a03f5e824eaac9837cd7f159c67b90fb4b7342",
                            UserName = "user",
                            UserRoleId = 2
                        });
                });

            modelBuilder.Entity("QuizMaster.Common.Library.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserRoleDesc")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            UserRoleDesc = "User"
                        },
                        new
                        {
                            Id = 1,
                            UserRoleDesc = "Admin"
                        });
                });

            modelBuilder.Entity("QuizMaster.Common.Library.Entities.Question", b =>
                {
                    b.HasOne("QuizMaster.Common.Library.Entities.QuestionCategory", "QCategory")
                        .WithMany()
                        .HasForeignKey("QCategoryId");

                    b.HasOne("QuizMaster.Common.Library.Entities.QuestionDifficulty", "QDifficulty")
                        .WithMany()
                        .HasForeignKey("QDifficultyId");

                    b.HasOne("QuizMaster.Common.Library.Entities.QuestionType", "QType")
                        .WithMany()
                        .HasForeignKey("QTypeId");

                    b.HasOne("QuizMaster.Common.Library.Entities.UserAccount", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QCategory");

                    b.Navigation("QDifficulty");

                    b.Navigation("QType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizMaster.Common.Library.Entities.QuestionCategory", b =>
                {
                    b.HasOne("QuizMaster.Common.Library.Entities.UserAccount", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizMaster.Common.Library.Entities.QuestionDetail", b =>
                {
                    b.HasOne("QuizMaster.Common.Library.Entities.Question", "Q")
                        .WithMany()
                        .HasForeignKey("QId");

                    b.HasOne("QuizMaster.Common.Library.Entities.UserAccount", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Q");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizMaster.Common.Library.Entities.QuestionDifficulty", b =>
                {
                    b.HasOne("QuizMaster.Common.Library.Entities.UserAccount", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizMaster.Common.Library.Entities.QuestionType", b =>
                {
                    b.HasOne("QuizMaster.Common.Library.Entities.UserAccount", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizMaster.Common.Library.Entities.UserAccount", b =>
                {
                    b.HasOne("QuizMaster.Common.Library.Entities.UserAccount", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.HasOne("QuizMaster.Common.Library.Entities.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UpdatedByUser");

                    b.Navigation("UserRole");
                });
#pragma warning restore 612, 618
        }
    }
}
